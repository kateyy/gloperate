#version 430
#extension GL_ARB_shading_language_include : require

layout (local_size_x = 16, local_size_y = 16) in;

#include </data/pathtracing/generic/sampling.glsl>


layout (binding = 0, rgba8) uniform image2D perFrameColorTexture;
layout (binding = 1, rgba8) uniform image2D aggregatedColorTexture;

uniform uvec2 layerSize;
uniform uint frameCounter;


void main()
{
    // coarse sampling / anti-aliasing: see sampling.glsl
    bool coarseSamplingInit;
    uint coarseSubSampleId = getCoarseSubSampleId(frameCounter, coarseSamplingInit);

	CoarseSamplingWindow coarseWindow = coarseSamplingWindows[coarseSubSampleId];

	// trace the origin of the coarse window (minimal coordinate)
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy * coarseSamplingWindowSize + coarseWindow.origin);

	if (coarseSamplingInit)
	{
        imageStore(aggregatedColorTexture, pixelCoords,
            imageLoad(perFrameColorTexture, pixelCoords));
	}
	else
	{
        vec4 newColor = imageLoad(perFrameColorTexture, pixelCoords);
        vec4 aggregated = imageLoad(aggregatedColorTexture, pixelCoords);

        float t = 1.0 / float(frameCounter - numCoarseSubSamples + 1);  
        imageStore(aggregatedColorTexture, pixelCoords,
            mix(aggregated, newColor, t));
	}
}
