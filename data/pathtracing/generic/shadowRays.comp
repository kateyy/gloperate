#version 430
#extension GL_ARB_shading_language_include : require

layout (local_size_x = 16, local_size_y = 16) in;

#include </pathtracing/generic/random.glsl>
#include </pathtracing/generic/rayCast.glsl>
#include </pathtracing/generic/sampling.glsl>

#include </PATHTRACING_EXTENSIONS/materials>
#include </PATHTRACING_EXTENSIONS/shadowRayCast>

uniform uint frameCounter;
uniform uint time;
uniform uint numRays;
uniform uint stride;
uniform uint depth;
uniform ivec2 viewportSize;


layout (std430, binding = 1) writeonly buffer PathStackDataBuffer
{
	PathStackData pathStackData[];
};

layout (std430, binding = 2) readonly buffer NextRays
{
	SecondOrderRay nextRays[];
};

const vec3 lightColor = vec3(1, 1, 1);


vec4 shadowRayCast(in vec3 origin);

void main()
{
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	int rayIndex = pos.y*int(stride)+pos.x;

	if (rayIndex >= numRays)
		return;

	random_seed(vec2(pos) / vec2(stride), int(depth * frameCounter + time));

    SecondOrderRay nextRay = nextRays[rayIndex];
    
    vec4 lightColor = shadowRayCast(nextRay.origin);

    uint pixelIndex = pixelCoordsToIndex(nextRay.pixel, viewportSize);
    pathStackData[pixelIndex].lightColor = lightColor;
}
